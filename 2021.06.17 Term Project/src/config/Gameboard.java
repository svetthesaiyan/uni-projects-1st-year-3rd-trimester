package config;

import java.util.Scanner;

import config.enums.UnitColour;
import config.enums.UnitDirections;
import config.pieces.Dwarf;
import config.pieces.Elf;
import config.pieces.Knight;
import config.utility.Dice;

public class Gameboard
{
	static Scanner scanner=new Scanner(System.in);
	/*
	 * –Ω–∞ 1–≤–∏ –∏ 2—Ä–∏ —Ä–µ–¥ —Å–µ –Ω–∞–º–∏—Ä–∞ –∑–∞–º—ä–∫—ä—Ç –Ω–∞ —á–µ—Ä–≤–µ–Ω–∏—Ç–µ
	 * –Ω–∞ 3—Ç–∏, 4—Ç–∏ –∏ 5—Ç–∏ —Ä–µ–¥ —Å–µ –Ω–∞–º–∏—Ä–∞ –±–æ–π–Ω–æ—Ç–æ –ø–æ–ª–µ
	 * –Ω–∞ 6—Ç–∏ –∏ 7–º–∏ —Ä–µ–¥ —Å–µ –Ω–∞–º–∏—Ä–∞ –∑–∞–º—ä–∫—ä—Ç –Ω–∞ —á–µ—Ä–Ω–∏—Ç–µ
	 */
	
	/* –ò–≥—Ä–∞—Ç–∞ —Å–µ –∏–≥—Ä–∞–µ –Ω–∞ –¥–≤–∞ –µ—Ç–∞–ø–∞:
	 * 1. –ù–∞—á–∞–ª–æ –Ω–∞ –∏–≥—Ä–∞—Ç–∞ ‚Äì –≤ —Ç–æ–∑–∏ –µ—Ç–∞–ø –∏–≥—Ä–∞—á–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–∞—Ç —Ñ–∏–≥—É—Ä–∏—Ç–µ —Å–∏ –≤—ä—Ä—Ö—É —Ç–µ—Ä–µ–Ω–∞, –∫–∞—Ç–æ –ø—ä—Ä–≤–∏—è—Ç —Ö–æ–¥ –µ –Ω–∞ —á–µ—Ä–Ω–∏—è –∏ —Å—ä—â–æ —Ç–∞–∫–∞ —Ñ–∏–≥—É—Ä–∏—Ç–µ –º–æ–≥–∞—Ç –¥–∞ —Å–µ —Å–ª–∞–≥–∞—Ç *–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–æ* –≤ –∑–∞–º—ä—Ü–∏—Ç–µ –Ω–∞ —Å—ä–æ—Ç–≤–µ—Ç–Ω–∏—è –∏–≥—Ä–∞—á 
	 * 2. –°—ä—â–∏–Ω—Å–∫–∞ –∏–≥—Ä–∞ ‚Äì –≤ —Ç–æ–∑–∏ –µ—Ç–∞–ø –∏–≥—Ä–∞—á–∏—Ç–µ –∏–∑–≤—ä—Ä—à–≤–∞—Ç –±–æ–π–Ω–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ü–µ–ª –Ω–∞–Ω–∞—Å—è–Ω–µ –Ω–∞ —â–µ—Ç–∏ –≤—ä—Ä—Ö—É —Ç–µ—Ö–Ω–∏—è –æ–ø–æ–Ω–µ–Ω—Ç
	 *    2.1 –î–∞ –ø—Ä–∏–¥–≤–∏–∂–∏ —Ñ–∏–≥—É—Ä–∞—Ç–∞ —Å–∏
	 *    2.2 –î–∞ –∞—Ç–∞–∫—É–≤–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤–∞ —Ñ–∏–≥—É—Ä–∞
	 *    2.3 –î–∞ –∏–∑–ª–µ–∫—É–≤–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—Ç–µ –º—É —â–µ—Ç–∏
	 */
	private static final int GAMEBOARD_ROW_COUNT=7;
	private static final int GAMEBOARD_COL_COUNT=9;
	
	// –í—Å–µ–∫–∏ –∏–≥—Ä–∞—á —Ä–∞–∑–ø–æ–ª–∞–≥–∞ —Å 2 –æ—Ç –≤—Å—è–∫–∞ —Ñ–∏–≥—É—Ä–∫–∞
	// ------------------------------------------
	/* –í—Å—è–∫–∞ –µ–¥–Ω–∞ –æ—Ç —Ñ–∏–≥—É—Ä–∏—Ç–µ —Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–∏—Ä–∞ —Å –ø–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞:
	 * 1. –ê—Ç–∞–∫–∞ ‚Äì —Ç–æ–≤–∞ –µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ —â–µ—Ç–∏, –∫–æ—è—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞ –Ω–∞–Ω–∞—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
	 * 2. –ë—Ä–æ–Ω—è ‚Äì —Ç–æ–≤–∞ –µ –∑–∞—â–∏—Ç–∞—Ç–∞, —Å –∫–æ—è—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞ —Ä–∞–∑–ø–æ–ª–∞–≥–∞ –≤ –¥–∞–¥–µ–Ω –º–æ–º–µ–Ω—Ç
	 * 3. –ó–¥—Ä–∞–≤–µ ‚Äì —Ç–æ–≤–∞ –µ –æ–±—â–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—ä–≤, —Å –∫–æ–µ—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞ —Ä–∞–∑–ø–æ–ª–∞–≥–∞. –ê–∫–æ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ 0, —Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞ —Å–µ —Å—á–∏—Ç–∞ –∑–∞ **–µ–ª–∏–º–∏–Ω–∏—Ä–∞–Ω–∞**
	 * 4. –ë–æ–π–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è ‚Äì —Ç–æ–≤–∞ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—Ç–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è, –Ω–∞ –∫–æ—è—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –∑–∞—Å—Ç–∞–Ω–µ, –∑–∞ –¥–∞ –∞—Ç–∞–∫—É–≤–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. 
	 * 	  4.1 –ï–ª—Ñ–∏—Ç–µ —Å—Ç—Ä–µ–ª—è—Ç —Å –ª—ä–∫ –∏ –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –Ω–∞–º–∏—Ä–∞—Ç –¥–∏—Ä–µ–∫—Ç–Ω–æ —Å—Ä–µ—â—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
	 *    4.2 –î–∂—É–¥–∂–µ—Ç–∞—Ç–∞ —Ö–≤—ä—Ä–ª—è—Ç —á—É–∫–æ–≤–µ.
	 * 5. –°–∫–æ—Ä–æ—Å—Ç ‚Äì —Ç–æ–≤–∞ –µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–∏, –ø—Ä–µ–∑ –∫–æ–∏—Ç–æ –º–æ–∂–µ —Ñ–∏–≥—É—Ä–∞—Ç–∞ –¥–∞ –ø—Ä–µ–º–∏–Ω–µ –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –µ–¥–∏–Ω —Ö–æ–¥.
	 */
	
//	private static final String UNIT_KNIGHT_RED  ="R%";
//	private static final String UNIT_ELF_RED     ="R&";
//	private static final String UNIT_DWARF_RED   ="R@";
//	private static final String UNIT_KNIGHT_BLACK="B%";
//	private static final String UNIT_ELF_BLACK   ="B&";
//	private static final String UNIT_DWARF_BLACK ="B@";
	
	// –í —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –ë–û–ô–ù–û–¢–û –ü–û–õ–ï —Å–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞—Ç –Ω–∞ *—Å–ª—É—á–∞–µ–Ω* –ø—Ä–∏–Ω—Ü–∏–ø –æ—Ç 1 –¥–æ 5 –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, –∫–∞—Ç–æ *–∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ* —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ —Å—Ç–µ–Ω–∞.
	// -----------------------------------------------------------
	/* –ó–∞ –¥–≤–∞—Ç–∞ —Ç–∏–ø–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å–∞ –≤–µ—Ä–Ω–∏ —Å–ª–µ–¥–Ω–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
	 * 1. –ù–µ –º–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç –ø—Ä–µ—Å–∫–∞—á–∞–Ω–∏
	 * 2. –ú–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç –∏–≥–Ω–æ—Ä–∏—Ä–∞–Ω–∏ –æ—Ç **–ï–ª—Ñ–∏—Ç–µ**. –ú–∏—Ç–∏—á–Ω–∏—Ç–µ —Å—ä—â–µ—Å—Ç–≤–∞ —Å—ä—â–æ —Ç–∞–∫–∞ –º–æ–≥–∞—Ç –¥–∞ –∞—Ç–∞–∫—É–≤–∞—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–∏ –¥–æ—Ä–∏ –Ω–∞ –ø—ä—Ç—è –∏–º –¥–∞ –∏–º–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ.
	 */
	private static final String UNIT_OBSTACLE_WALL      ="#";
	// –±–∞—Ä–∏–∫–∞–¥–∏—Ç–µ –º–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç —Ä–∞–∑—Ä—É—à–∞–≤–∞–Ω–∏, –∑–∞ –¥–∞ —Å–µ –æ—Å–≤–æ–±–æ–¥–∏ –ø—ä—Ç—è—Ç
	private static final String UNIT_OBSTACLE_BARRICADE ="$";
	
	private static final String UNIT_TERRAIN_PLACEHOLDER="*";
	// –ø—Ä–∏ —Ä–µ–¥ –Ω–∞ –¥–∞–¥–µ–Ω –∏–≥—Ä–∞—á –ø–æ–ª–µ—Ç–∞—Ç–∞, –Ω–∞ –∫–æ–∏—Ç–æ —Ç–æ–π –º–æ–∂–µ –¥–∞ —Å–µ –ø—Ä–µ–º–µ—Å—Ç–∏, —â–µ —Å–µ –æ–∑–Ω–∞—á–∞—Ç —Å '–•'-–æ–≤–µ
	private static final String UNIT_TERRAIN_CONQUERABLE="X";
	
    private static int obstacleAmount=0;
    private static int turnCounter   =0;
    
    public static int redPlayerPointsTally  =0;
    public static int blackPlayerPointsTally=0;

    private static int redDeadUnitsCounter  =0; // ü§†
    private static int blackDeadUnitsCounter=0;
    private static String redDeadUnitsInChronologicalOrder  ="";
    private static String blackDeadUnitsInChronologicalOrder="";
	
	public static String[][] bootstrapGameBoard()
	{
		// —Ç—É–∫ –º–∏ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–º–æ—â, —á–µ —Å—ä–≤—Å–µ–º –≥–∏ –æ–º—É—Ç–∞—Ö —Ç–∏–ø–æ–≤–µ—Ç–µ –Ω–∞ –º–µ—Ç–æ–¥–∏—Ç–µ xd
		String[][] gameBoard=new String[GAMEBOARD_ROW_COUNT][GAMEBOARD_COL_COUNT];
		
		gameBoard=generateTerrain(gameBoard);
		
        blackPlayerStartingPhase(gameBoard);
        System.out.println();
        redPlayerStartingPhase(gameBoard);
        
        generateObstacles(gameBoard);
        
        battlePhase(gameBoard);
        
        System.out.println("–ò–∑–±–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ —â–µ –ø–æ—á–≤–∞—Ç–µ –Ω–æ–≤–∞ –∏–≥—Ä–∞ –∏–ª–∏ —â–µ –ø—Ä–∏–∫–ª—é—á–≤–∞—Ç–µ —Ç–µ–∫—É—â–∞—Ç–∞ –∏–≥—Ä–æ–≤–∞ —Å–µ—Å–∏—è.");
        System.out.println("1. –ù–æ–≤–∞ –∏–≥—Ä–∞");
        System.out.println("2. –ü—Ä–∏–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∞ –∏–≥—Ä–æ–≤–∞ —Å–µ—Å–∏—è");
        System.out.print("–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∏–∑–±–æ—Ä —Ç—É–∫: ");
        int input=Integer.parseInt(scanner.nextLine());
        if(input==1)
        	bootstrapGameBoard();
        else
            return gameBoard;
		
		return gameBoard;
	}
	
	public static void renderGameBoard(String[][] gameBoard)
	{
		System.out.println("    1     2     3     4     5     6     7     8     9  < –∫–æ–ª–æ–Ω–∏");
		for(int row=0; row<GAMEBOARD_ROW_COUNT; row++)
		{
			System.out.print(row+1);
			for(int col=0; col<GAMEBOARD_COL_COUNT; col++)
			{
				System.out.print(" | "+gameBoard[row][col]+" |");
			}
			
			if(row==0 || row==1)
				System.out.print(" üëø –ó–∞–º—ä–∫—ä—Ç –Ω–∞ —á–µ—Ä–≤–µ–Ω–∏—Ç–µ üëø");
			else if(row==2 || row==3 || row==4)
				System.out.print("    ‚ö°‚ö° –ë–æ–π–Ω–æ –ø–æ–ª–µ ‚ö°‚ö°");
			else if(row==5 || row==6)
				System.out.print("  üêµ –ó–∞–º—ä–∫—ä—Ç –Ω–∞ —á–µ—Ä–Ω–∏—Ç–µ üêµ");
			
			System.out.println();
		}
		System.out.println("^"+"\n"+"—Ä–µ–¥–æ–≤–µ");
	}
	
	private static String[][] generateTerrain(String[][] gameBoard)
	{
		for(int row=0; row<GAMEBOARD_ROW_COUNT; row++)
		{
			for(int col=0; col<GAMEBOARD_COL_COUNT; col++)
			{
				gameBoard[row][col]=UNIT_TERRAIN_PLACEHOLDER;
			}
		}
		return gameBoard;
	}
	
    private static void blackPlayerStartingPhase(Assets[][] gameBoard)
    {
    	int unitKnightAvailable=2;
        int unitElfAvailable   =2;
        int unitDwarfAvailable =2;
        while(unitKnightAvailable>0 || unitElfAvailable>0 || unitDwarfAvailable>0) 
        {
            System.out.println("–ò–∑–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Ñ–∏–≥—É—Ä–∞, –∫–æ—è—Ç–æ –¥–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç–µ –≤—ä–≤ –≤–∞—à–∏—è –∑–∞–º—ä–∫.");
            System.out.println("1. –†–∏—Ü–∞—Ä"+"\t"+"–ò–º–∞—Ç–µ "+unitKnightAvailable+" –æ—Å—Ç–∞–≤–∞—â–∏ —Ä–∏—Ü–∞—Ä–∏ –≤ –∞—Ä—Å–µ–Ω–∞–ª–∞ —Å–∏.");
            System.out.println("2. –ï–ª—Ñ"+"\t"+"–ò–º–∞—Ç–µ "+unitElfAvailable+" –æ—Å—Ç–∞–≤–∞—â–∏ –µ–ª—Ñ–∏ –≤ –∞—Ä—Å–µ–Ω–∞–ª–∞ —Å–∏.");
            System.out.println("3. –î–∂—É–¥–∂–µ"+"\t"+"–ò–º–∞—Ç–µ "+unitDwarfAvailable+" –æ—Å—Ç–∞–≤–∞—â–∏ –¥–∂—É–¥–∂–µ—Ç–∞ –≤ –∞—Ä—Å–µ–Ω–∞–ª–∞ —Å–∏.");
            System.out.print("–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∏–∑–±–æ—Ä —Ç—É–∫: ");
            int command=Integer.parseInt(scanner.nextLine());
            String unitSymbol=" ";
            if(command==1 && unitKnightAvailable!=0) 
            {
                unitSymbol="%";
                generateUnits(unitSymbol, gameBoard, UnitColour.BLACK);
                unitKnightAvailable--;
            }
            else if(command==2 && unitElfAvailable!=0) 
            {
                unitSymbol="&";
                generateUnits(unitSymbol, gameBoard, UnitColour.BLACK);
                unitElfAvailable--;
            }
            else if(command==3 && unitDwarfAvailable!=0) 
            {
                unitSymbol="@";
                generateUnits(unitSymbol, gameBoard, UnitColour.BLACK);
                unitDwarfAvailable--;
            }
        }
    }
	
    private static void redPlayerStartingPhase(Assets[][] gameBoard)
    {
        int unitKnightAvailable=2;
        int unitDwarfAvailable =2;
        int unitElfAvailable   =2;
        while (unitKnightAvailable>0 || unitElfAvailable>0 || unitDwarfAvailable>0) 
        {
        	System.out.println("–ò–∑–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Ñ–∏–≥—É—Ä–∞, –∫–æ—è—Ç–æ –¥–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç–µ –≤—ä–≤ –≤–∞—à–∏—è –∑–∞–º—ä–∫.");
            System.out.println("1. –†–∏—Ü–∞—Ä"+"\t"+"–ò–º–∞—Ç–µ "+unitKnightAvailable+" –æ—Å—Ç–∞–≤–∞—â–∏ —Ä–∏—Ü–∞—Ä–∏ –≤ –∞—Ä—Å–µ–Ω–∞–ª–∞ —Å–∏.");
            System.out.println("2. –ï–ª—Ñ"+"\t"+"–ò–º–∞—Ç–µ "+unitElfAvailable+" –æ—Å—Ç–∞–≤–∞—â–∏ –µ–ª—Ñ–∏ –≤ –∞—Ä—Å–µ–Ω–∞–ª–∞ —Å–∏.");
            System.out.println("3. –î–∂—É–¥–∂–µ"+"\t"+"–ò–º–∞—Ç–µ "+unitDwarfAvailable+" –æ—Å—Ç–∞–≤–∞—â–∏ –¥–∂—É–¥–∂–µ—Ç–∞ –≤ –∞—Ä—Å–µ–Ω–∞–ª–∞ —Å–∏.");
            String unitSymbol=" ";
            int command=Integer.parseInt(scanner.nextLine());
            if(command==1 && unitKnightAvailable!=0) 
            {
                unitSymbol="%";
                generateUnits(unitSymbol, gameBoard, UnitColour.RED);
                unitKnightAvailable--;
            }
            else if(command==2 && unitElfAvailable!=0) 
            {
                unitSymbol="&";
                generateUnits(unitSymbol, gameBoard, UnitColour.RED);
                unitElfAvailable--;
            }
            else if(command==3 && unitDwarfAvailable!=0) 
            {
                unitSymbol="@";
                generateUnits(unitSymbol, gameBoard, UnitColour.RED);
                unitDwarfAvailable--;
            }
        }
    }

    private static void generateUnits(String unitSymbol, Assets[][] gameBoard, UnitColour colour){
    	int row=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ ROW –ø–æ–∑–∏—Ü–∏—è");
        int col=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ COL –ø–æ–∑–∏—Ü–∏—è");
        
        if(unitSymbol.equals("%"))
        {
            Knight knight=new Knight(row, col, colour);
            gameBoard[row][col]=knight;
        }
        else if(unitSymbol.equals("&"))
        {
            Elf elf=new Elf(row, col, colour);
            gameBoard[row][col]=elf;
        }
        else if(unitSymbol.equals("@"))
        {
            Dwarf dwarf=new Dwarf(row, col, colour);
            gameBoard[row][col]=dwarf;
        }
    }
    
    private static void generateObstacles(String[][] gameBoard)
    {
        for (int row=2; row<5; row++)
        {
            for (int col=0; col<GAMEBOARD_COL_COUNT; col++)
            {
                int randomNumber=Dice.generateObstacle();
                if(randomNumber==3 && obstacleAmount<5)
                {
                    int obstacleType=Dice.decideObstacleType();
                    if(obstacleType==1) // —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –¥–æ–≤—ä—Ä—à–µ spawn-–≤–∞–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
                    {
                    	
                        gameBoard[row][col]=UNIT_OBSTACLE_BARRICADE;
                        obstacleAmount++;
                    }
                    else if(obstacleType==2)
                    {
                    	
                        gameBoard[row][col]=UNIT_OBSTACLE_WALL;
                        obstacleAmount++;
                    }
                }
            }
        }
        
        if(obstacleAmount==1)
        {
            int row=0;
            int col=0;
            
            gameBoard[row][col]=UNIT_OBSTACLE_WALL;
        }
    }
    
    private static void battlePhase(Assets[][] gameBoard)
    {
        System.out.println("–†–µ–¥ –µ –Ω–∞ —á–µ—Ä–Ω–∏—è –∏–≥—Ä–∞—á.");
        menu(gameBoard, UnitColour.BLACK);
        
        System.out.println("–†–µ–¥ –µ –Ω–∞ —á–µ—Ä–≤–µ–Ω–∏—è –∏–≥—Ä–∞—á.");
        menu(gameBoard, UnitColour.RED);
        
        if(redDeadUnitsCounter==6)
        {
            System.out.println("–ß–µ—Ä–Ω–∏—è—Ç –∏–≥—Ä–∞—á –ø–µ—á–µ–ª–∏!");
            endOfGameStats(UnitColour.BLACK);
            return;
        }
        else if(blackDeadUnitsCounter==6)
        {
        	System.out.println("–ß–µ—Ä–≤–µ–Ω–∏—è—Ç –∏–≥—Ä–∞—á –ø–µ—á–µ–ª–∏!");
            endOfGameStats(UnitColour.RED);
            return;
        }
        
        turnCounter++;
        battlePhase(gameBoard);
    }
    
    private static void menu(Assets[][] gameBoard, UnitColour colour)
    {
    	System.out.println("–ò–∑–±–µ—Ä–µ—Ç–µ –±–æ–π–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ.");
        System.out.println("1. –ü—Ä–µ–º–µ—Å—Ç–∏ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞");
        System.out.println("2. –ê—Ç–∞–∫—É–≤–∞–π —Å –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞");
        System.out.println("3. –ò–∑–ª–µ–∫—É–≤–∞–π –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞");
        System.out.println("4. –£–Ω–∏—â–æ–∂–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ");
        System.out.println("5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞");
        System.out.print("–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∏–∑–±–æ—Ä —Ç—É–∫: ");
        int command=Integer.parseInt(scanner.nextLine());
        if(command==1)
            moveUnit(gameBoard);
        else if(command==2)
            attackUnit(gameBoard,colour);
        else if(command==3)
            healUnit(gameBoard);
        else if(command==4) // —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞ *—Å—ä—â–∏–Ω—Å–∫–æ* —É–Ω–∏—â–æ–∂–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å–≤–∏—è—Ç–∞, —Ç—ä–π –∫–∞—Ç–æ —Ç–æ–≤–∞ –µ placeholder –º–µ—Ç–æ–¥ –∑–∞—Å–µ–≥–∞
        	destroyObstacle(gameBoard);
        else if(command==5)
            unitStats(colour);
    }
    
    // if(command==1)
    private static void moveUnit(Assets[][] gameBoard)
    {
        int currentUnitRow=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ —Ä–µ–¥–∞, –Ω–∞ –∫–æ–π—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞, –∫–æ—è—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–µ–º–µ—Å—Ç–∏—Ç–µ, —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        int currentUnitCol=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–ª–æ–Ω–∞—Ç–∞, –Ω–∞ –∫–æ—è—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞, –∫–æ—è—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–µ–º–µ—Å—Ç–∏—Ç–µ, —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        Assets currentUnitPosition=gameBoard[currentUnitRow][currentUnitCol];
        
        UnitDirections movementCommand=Console.direction("–í—ä–≤–µ–¥–µ—Ç–µ –Ω–∞ –∫–æ—è –ø–æ—Å–æ–∫–∞ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞.");
        int newUnitRow=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ —Ä–µ–¥–∞, –Ω–∞ –∫–æ–π—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞—Ç–∞: ");
        int newUnitCol=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–ª–æ–Ω–∞—Ç–∞, –Ω–∞ –∫–æ—è—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞—Ç–∞: ");
        
        if(currentUnitPosition.isMovePossible(movementCommand, newUnitRow, newUnitCol))
        {
            gameBoard[currentUnitRow][currentUnitCol]=null; // –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞ –ø—Ä–µ–¥–∏ —Å–∞–º–æ—Ç–æ –ø—Ä–µ–º–µ—Å—Ç–≤–∞–Ω–µ
            currentUnitPosition.move(newUnitRow, newUnitCol); // –ø—Ä–∏–¥–≤–∏–∂–≤–∞–º–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞
            gameBoard[newUnitRow][newUnitCol] = currentUnitPosition; // –æ–±–Ω–æ–≤—è–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞ —Å–ª–µ–¥ –ø—Ä–µ–º–µ—Å—Ç–≤–∞–Ω–µ—Ç–æ
        }
        else 
            System.out.println("–ù—è–º–∞—Ç–µ –ø—Ä–∞–≤–æ –¥–∞ –ø—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞ —Ç–∞–º!");
    }
    
    // –¥–æ–ø—ä–ª–Ω–µ–Ω–∏–µ –∫—ä–º –º–µ—Ç–æ–¥–∞ –∑–∞ –∞—Ç–∞–∫—É–≤–∞–Ω–µ
    private static void deathUnit(UnitColour colour, int enemySelectedRow, int enemySelectedCol, Assets[][] gameBoard)
    {
        String unitName="";
        
        if(colour==UnitColour.RED) // —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –¥–æ–≤—ä—Ä—à–∏
        {
           
            redDeadUnitsInChronologicalOrder+=unitName+" ";
            redDeadUnitsCounter++;
        }
        else if(colour==UnitColour.BLACK) // —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –¥–æ–≤—ä—Ä—à–∏
        {
          
            blackDeadUnitsInChronologicalOrder+=unitName+" ";
            blackDeadUnitsCounter++;
        }
    }
    
    // else if(command==2)
    private static void attackUnit(Assets[][] gameBoard,UnitColour colour)
    {
    	int attackingUnitRow=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ —Ä–µ–¥–∞, –Ω–∞ –∫–æ–π—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞, —Å –∫–æ—è—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –∞—Ç–∞–∫—É–≤–∞—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        int attackingUnitCol=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–ª–æ–Ω–∞—Ç–∞, –Ω–∞ –∫–æ—è—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞, —Å–∫–æ—è—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –∞—Ç–∞–∫—É–≤–∞—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        Assets attackingUnitPosition=gameBoard[attackingUnitRow][attackingUnitCol];
        
        System.out.println("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –∫–æ–º—É—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –∞—Ç–∞–∫—É–≤–∞—Ç–µ.");
        int enemyUnitRow=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ —Ä–µ–¥–∞, –Ω–∞ –∫–æ–π—Ç–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞ —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        int enemyUnitCol=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–ª–æ–Ω–∞—Ç–∞, –Ω–∞ –∫–æ—è—Ç–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤–∞—Ç–∞ —Ñ–∏–≥—É—Ä–∞ —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        Assets enemyPosition = gameBoard[enemyUnitRow][enemyUnitCol];
        
        if(attackingUnitPosition.isAttackPossible(enemyUnitRow, enemyUnitCol)) 
        {
            int firstDiceThrow =Dice.diceOffenseAndHeal();
            int secondDiceThrow=Dice.diceOffenseAndHeal();
            int thirdDiceThrow =Dice.diceOffenseAndHeal();
            int diceThrowSum=firstDiceThrow+secondDiceThrow+thirdDiceThrow;
            if(diceThrowSum==enemyPosition.health)
                System.out.println(Console.missedAttackWarning());
            else if(diceThrowSum==3)
            {
                int damage=(attackingUnitPosition.attack-enemyPosition.armour)/2;
                enemyPosition.health-=damage;
                
                if(colour==UnitColour.RED)
                    redPlayerPointsTally+=damage;
                else if(colour==UnitColour.BLACK)
                    blackPlayerPointsTally+=damage;
                
                gameBoard[enemyUnitRow][enemyUnitCol]=enemyPosition;
            }
            else 
            {
                int damage=attackingUnitPosition.attack-enemyPosition.armour;
                enemyPosition.health-=damage;
                
                if(colour==UnitColour.RED)
                    redPlayerPointsTally+=damage;
                else if(colour==UnitColour.BLACK)
                    blackPlayerPointsTally+=damage;
                
                gameBoard[enemyUnitRow][enemyUnitCol]=enemyPosition;
            }
            
            if (enemyPosition.health<=0)
            {
                if(colour==UnitColour.RED)
                    deathUnit(UnitColour.BLACK,enemyUnitRow,enemyUnitCol,gameBoard);
                else
                    deathUnit(UnitColour.RED,enemyUnitRow,enemyUnitCol,gameBoard);
            }
        }
        else 
            System.out.println("–ù–µ –º–æ–∂–µ—Ç–µ –¥–∞ –∞—Ç–∞–∫—É–≤–∞—Ç–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤–∞ —Ñ–∏–≥—É—Ä–∞!");
    }
    
    // else if(command==3)
    private static void healUnit(Assets[][] gameBoard)
    {
    	int currentUnitRow=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ —Ä–µ–¥–∞, –Ω–∞ –∫–æ–π—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞, –∫–æ—è—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑–ª–µ–∫—É–≤–∞—Ç–µ, —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        int currentUnitCol=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–ª–æ–Ω–∞—Ç–∞, –Ω–∞ –∫–æ—è—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞, –∫–æ—è—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑–ª–µ–∫—É–≤–∞—Ç–µ, —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        Assets currentUnitPosition=gameBoard[currentUnitRow][currentUnitCol];
        
        int healDice=Dice.diceOffenseAndHeal();
        currentUnitPosition.health+=healDice;
    }
    
    // else if(command==4)
    private static void destroyObstacle(Assets[][] gameBoard) 
    {
    	
    }
    
    // else if(command==5)
    private static void unitStats(UnitColour colour)
    {
    	int currentUnitRow=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ —Ä–µ–¥–∞, –Ω–∞ –∫–æ–π—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞, —á–∏–∏—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–µ–≥–ª–µ–¥–∞—Ç–µ, —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        int currentUnitCol=Console.input("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–ª–æ–Ω–∞—Ç–∞, –Ω–∞ –∫–æ—è—Ç–æ —Ñ–∏–≥—É—Ä–∞—Ç–∞, —á–∏–∏—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–µ–≥–ª–µ–¥–∞—Ç–µ, —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç–∞: ");
        
        if(colour==UnitColour.RED) // —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –¥–æ–≤—ä—Ä—à–∏
        {
           
        }
        else if(colour==UnitColour.BLACK) // —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –¥–æ–≤—ä—Ä—à–∏
        {
          
        }
    }
    
    private static void endOfGameStats(UnitColour colour)
    {
        if(colour==UnitColour.RED) 
        {
            System.out.println("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ –Ω–∞ —á–µ—Ä–≤–µ–Ω–∏—è –∏–≥—Ä–∞—á —Å–∞:");
            System.out.println("–û–±—â–æ —Ä–µ–¥–æ–≤–µ: "+turnCounter);
            System.out.println("–û–±—â –±—Ä–æ–π —Ç–æ—á–∫–∏: " + redPlayerPointsTally);
            System.out.println("–ü–∞–¥–Ω–∞–ª–∏ —Ñ–∏–≥—É—Ä–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ–Ω —Ä–µ–¥: "+redDeadUnitsInChronologicalOrder);
            System.out.println();
            System.out.println("–û–±—â –±—Ä–æ–π —Ç–æ—á–∫–∏ –Ω–∞ —á–µ—Ä–Ω–∏—è –∏–≥—Ä–∞—á: "+blackPlayerPointsTally);
            System.out.println("–ü–∞–¥–Ω–∞–ª–∏ —Ñ–∏–≥—É—Ä–∏ –Ω–∞ —á–µ—Ä–Ω–∏—è –∏–≥—Ä–∞—á –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ–Ω —Ä–µ–¥: "+blackDeadUnitsInChronologicalOrder);
        }
        else if(colour==UnitColour.BLACK)
        {
            System.out.println("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ –Ω–∞ —á–µ—Ä–Ω–∏—è –∏–≥—Ä–∞—á —Å–∞:");
            System.out.println("–û–±—â–æ —Ä–µ–¥–æ–≤–µ: "+turnCounter);
            System.out.println("–û–±—â –±—Ä–æ–π —Ç–æ—á–∫–∏: "+blackPlayerPointsTally);
            System.out.println("–ü–∞–¥–Ω–∞–ª–∏ —Ñ–∏–≥—É—Ä–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ–Ω —Ä–µ–¥: "+blackDeadUnitsInChronologicalOrder);
            System.out.println();
            System.out.println("–û–±—â –±—Ä–æ–π —Ç–æ—á–∫–∏ –Ω–∞ —á–µ—Ä–≤–µ–Ω–∏—è –∏–≥—Ä–∞—á: " + redPlayerPointsTally);
            System.out.println("–ü–∞–¥–Ω–∞–ª–∏ —Ñ–∏–≥—É—Ä–∏ –Ω–∞ —á–µ—Ä–≤–µ–Ω–∏—è –∏–≥—Ä–∞—á –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ–Ω —Ä–µ–¥: "+redDeadUnitsInChronologicalOrder);
        }
    }
}
